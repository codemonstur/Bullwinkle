package app.output;

import bullwinkle.nodes.Node;

import java.util.ArrayDeque;
import java.util.Deque;

import static bullwinkle.Constants.*;

/**
 * Traverses a parse tree and converts it into a simple XML representation.
 */
public final class Xml implements OutputFormatVisitor {

	private final Deque<String> parentNodes;
	private final Deque<String> indents;

	private final StringBuilder output;

	// The name given to the topmost element of the tree (i.e. the one that encloses the whole tree)
	private String topElementName = "parsetree";
	// The element name used to surround leaf tokens
	private String tokenElementName = "token";

	public Xml() {
		parentNodes = new ArrayDeque<>();
		indents = new ArrayDeque<>();
		output = new StringBuilder();
		indents.push(EMPTY);
	}

	/**
	 * Sets the element name used to surround the XML parse tree
	 */
	public void setTopElementName(final String name)
	{
		topElementName = name;
	}
	/**
	 * Sets the element name used to surround leaf tokens
	 */
	public void setTokenElementName(final String name) {
		tokenElementName = name;
	}

	@Override
	public void visit(final Node node) {
		String label = node.getValue();
		String current_indent = indents.peek() + TWO_SPACES;
		if (label == null) {
			label = node.getToken();
			output.append(current_indent).append(LESS_THAN).append(tokenElementName).append(GREATER_THAN).append(NEW_LINE);
			indents.push(current_indent);
			current_indent = indents.peek();
			output.append(current_indent).append(label).append(NEW_LINE);
			parentNodes.push(tokenElementName);
		} else {
			// Remove symbols surrounding the name of a rule
			label = label.replace(LESS_THAN, EMPTY);
			label = label.replace(GREATER_THAN, EMPTY);
			output.append(current_indent).append(LESS_THAN).append(label).append(GREATER_THAN).append(NEW_LINE);
			parentNodes.push(label);
			indents.push(current_indent);
		}
	}

	@Override
	public void pop() {
		output.append(indents.pop()).append(LESS_THAN).append(FORWARD_SLASH).append(parentNodes.pop()).append(GREATER_THAN).append(NEW_LINE);
	}

	@Override
	public String toOutputString() {
		return "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n" +
			"<!-- File auto-generated by Bullwinkle -->\n" +
			"<" + topElementName + ">\n" + output + "</" + topElementName + ">";
	}

}
